<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.awesomeagile</groupId>
  <artifactId>awesomeagile</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>Awesome Agile</name>
  <inceptionYear>2015</inceptionYear>
  <organization>
    <name>Mark Warren, Phillip Heller, Matt Kubej, Linghong Chen, Stanislav Belov, Qanit Al</name>
  </organization>
  <licenses>
    <license>
      <name>Apache License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0</url>
    </license>
  </licenses>

  <properties>
    <node.version>v5.0.0</node.version>
    <npm.version>2.7.6</npm.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <docker.client.version>3.2.1</docker.client.version>
    <guava.version>18.0</guava.version>
    <spring-social-google.version>1.0.0.RELEASE</spring-social-google.version>
    <java.version>1.8</java.version>
    <jacoco-maven-plugin.version>0.7.5.201505241946</jacoco-maven-plugin.version>
    <coveralls-maven-plugin.version>4.0.0</coveralls-maven-plugin.version>
    <license-maven-plugin.version>1.8</license-maven-plugin.version>
  </properties>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.3.0.RELEASE</version>
  </parent>

  <repositories>
    <repository>
      <id>spring-releases</id>
      <url>https://repo.spring.io/libs-release</url>
    </repository>
    <repository>
      <id>maven-central</id>
      <url>http://repo.maven.apache.org/maven2/</url>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>spring-releases</id>
      <url>https://repo.spring.io/libs-release</url>
    </pluginRepository>
    <pluginRepository>
      <id>frontend-maven-plugin-repository</id>
      <url>https://repo1.maven.org/maven2/com/github/eirslett/frontend-maven-plugin/</url>
    </pluginRepository>
  </pluginRepositories>

  <dependencies>
    <dependency>
      <!-- application is a web application -->
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <!-- use spring boot for security -->
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
      <!-- use spring social providers for authentication -->
      <groupId>org.springframework.social</groupId>
      <artifactId>spring-social-security</artifactId>
    </dependency>
    <dependency>
      <!-- integrate with google as a social provider -->
      <groupId>org.springframework.social</groupId>
      <artifactId>spring-social-google</artifactId>
      <version>${spring-social-google.version}</version>
    </dependency>
    <dependency>
      <!-- info/health/metrics/etc endpoints -->
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <!-- convenience/utility -->
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>${guava.version}</version>
    </dependency>
    <dependency>
      <!-- use JPA for data access -->
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <!-- database is postgresql -->
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
    </dependency>
    <dependency>
      <!-- for database connection pooling -->
      <groupId>com.zaxxer</groupId>
      <artifactId>HikariCP</artifactId>
    </dependency>
    <dependency>
      <!-- use flyway to manage database migrations -->
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-core</artifactId>
    </dependency>

    <!-- test concerns -->

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.spotify</groupId>
      <artifactId>docker-client</artifactId>
      <version>${docker.client.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>

    <resources>
      <resource>
        <directory>${project.basedir}/src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
      <resource>
        <!-- include generated-sources as a resource folder -->
        <directory>${project.build.directory}/generated-sources</directory>
      </resource>
    </resources>

    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <version>${license-maven-plugin.version}</version>
        <configuration>
          <licenseName>apache_v2</licenseName>
          <processStartTag>================================================================================================</processStartTag>
          <processEndTag>------------------------------------------------------------------------------------------------</processEndTag>
          <verbose>false</verbose>
          <sectionDelimiter>%%</sectionDelimiter>
          <addSvnKeyWords>false</addSvnKeyWords>
        </configuration>
        <executions>
          <execution>
            <id>first</id>
            <goals>
              <goal>add-third-party</goal>
              <goal>update-file-header</goal>
            </goals>
            <phase>process-sources</phase>
            <configuration>
              <roots>
                <root>src/main/java</root>
                <root>src/test/java</root>
                <root>src/main/resources</root>
                <root>src/test/resources</root>
              </roots>
              <excludes>
                <exclude>**/*.png</exclude>
                <exclude>**/*.jpg</exclude>
                <exclude>**/*.gif</exclude>
              </excludes>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <addResources>true</addResources>
        </configuration>
      </plugin>
      <plugin>
        <!-- remove node_modules on clean -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <configuration>
          <filesets>
            <fileset>
              <directory>${basedir}/node_modules</directory>
            </fileset>
          </filesets>
        </configuration>
      </plugin>
      <plugin>
        <!-- install front-end dependencies; see https://github.com/eirslett/frontend-maven-plugin -->
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <version>0.0.26</version>
        <configuration>
          <installDirectory>${basedir}/target</installDirectory>
        </configuration>
        <executions>
          <execution>
            <id>install node and npm</id>
            <goals>
              <goal>install-node-and-npm</goal>
            </goals>
            <configuration>
              <nodeVersion>${node.version}</nodeVersion>
              <npmVersion>${npm.version}</npmVersion>
            </configuration>
          </execution>
          <execution>
            <id>npm install</id>
            <goals>
              <goal>npm</goal>
            </goals>
            <configuration>
              <arguments>install --no-optional</arguments>
            </configuration>
          </execution>
          <execution>
            <id>javascript tests</id>
            <goals>
              <goal>karma</goal>
            </goals>
            <phase>test</phase>
            <configuration>
              <!-- optional: the default is "karma.conf.js" in your working directory -->
              <karmaConfPath>karma.conf.js</karmaConfPath>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!-- copy node_modules into generated-sources -->
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-resources</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.outputDirectory}/static/node_modules
              </outputDirectory>
              <resources>
                <resource>
                  <directory>${project.basedir}/node_modules</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.spotify</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>0.3.5</version>
        <configuration>
          <serverId>docker-hub</serverId>
          <imageName>awesomeagile/${project.artifactId}:latest</imageName>
          <dockerDirectory>${project.basedir}/src/docker/awesomeagile</dockerDirectory>
          <resources>
            <resource>
              <targetPath>/</targetPath>
              <directory>${project.build.directory}</directory>
              <include>${project.build.finalName}.jar</include>
            </resource>
          </resources>
        </configuration>
      </plugin>
      <plugin>
        <groupId>pl.project13.maven</groupId>
        <artifactId>git-commit-id-plugin</artifactId>
      </plugin>

      <plugin>
        <!-- Generate code coverage reports -->
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco-maven-plugin.version}</version>
        <executions>
          <execution>
            <id>prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <goals>
              <goal>report</goal>
            </goals>
            <phase>test</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!-- Push code coverage reports to coveralls.io -->
        <groupId>org.eluder.coveralls</groupId>
        <artifactId>coveralls-maven-plugin</artifactId>
        <version>${coveralls-maven-plugin.version}</version>
        <configuration>
          <repoToken>${env.COVERALLS_REPO_TOKEN}</repoToken>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>

